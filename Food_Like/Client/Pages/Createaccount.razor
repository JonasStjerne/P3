@page "/createaccount"
@using Food_Like.Shared
@inject HttpClient Http
@inject NavigationManager NavManager
@using Tewr.Blazor.FileReader
@inject IFileReaderService FileReaderService;

<style>


    .createbtn {
        width: 190px;
        height: 56px;
    }

    .centerdiv {
        display: flex;
        justify-content: center;
        margin: 5px;
    }

    .createpicture {
        height: 118px;
        width: 118px;
        margin-left: auto;
        margin-right: auto;
    }

    .profilepicture {
        height: 118px;
        width: 118px;
        margin-left: auto;
        margin-right: auto;
        border-radius: 100%;
    }
</style>

<div class="createpicture">
    <input type="file" id="file-upload" style="display: none" @ref="inputTypeFileElement" @onchange="HandleUpload" />
    <label for="file-upload" style="cursor: pointer">
        @if (profilePictureSrc != null)
        {
    <img src="@profilePictureSrc" class="profilepicture" alt="Profile Picture">}
    </label>
</div>


<div class="centerdiv">
    <form class="form-create ">
        <label for="inputEmail" class="">Email address</label>
        <input @bind="email" type="email" id="inputEmail" class="form-control mb-2 shadow-sm" placeholder="Email address" required autofocus>

        <label for="inputPassword" class="">Password</label>
        <input @bind="password" type="password" id="inputPassword" class="form-control mb-2 shadow-sm" placeholder="Password" required>


        <label for="inputFirstname" class="">Firstname</label>
        <input @bind="firstname" type="text" id="inputFirstname" class="form-control mb-2 shadow-sm" placeholder="Firstname" required autofocus>

        <label for="inputSurnamee" class="">Surname</label>
        <input @bind="surname" type="text" id="inputSurname" class="form-control mb-2 shadow-sm" placeholder="Surname" required autofocus>

        <label for="inputNumber" class="">Mobile</label>
        <input @bind="mobile" type="number" id="inputNumber" class="form-control mb-2 shadow-sm" placeholder="Mobile" required autofocus>

        <button class="mt-4 btn btn-lg btn-primary btn-block createbtn" type="button" @onclick="submitCreate">Create</button>

    </form>
    @if (errorMessage.Length > 0)
    {
<div class="alert alert-danger" role="alert">
    <p>@errorMessage</p>
</div>}
</div>

@code {

    private ElementReference inputTypeFileElement;

    private string errorMessage = "";

    private string email { get; set; }
    private string password { get; set; }
    private string firstname { get; set; }
    private string surname { get; set; }
    private string mobile { get; set; }
    private byte[] profilePicture = new byte[] { };

    private string profilePictureSrc = null;

    protected async override Task OnInitializedAsync()
    {
        var defaultImg = await Http.GetByteArrayAsync("/assets/createpicture.png");
        var base64 = Convert.ToBase64String(defaultImg);
        profilePictureSrc = String.Format("data:image/jpg;base64,{0}", base64);
    }

    private async Task HandleUpload()
    {
        foreach (var file in await FileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            if (file != null)
            {
                var fileInfo = await file.ReadFileInfoAsync();
                using (var ms = await file.CreateMemoryStreamAsync(4 * 1024))
                {
                    profilePicture = new byte[fileInfo.Size];
                    profilePicture = ms.ToArray();
                    var base64 = Convert.ToBase64String(profilePicture);
                    profilePictureSrc = String.Format("data:image/jpg;base64,{0}", base64);
                }
            }
        }
    }

    private async void submitCreate()
    {
        errorMessage = "";
        var req = new Buyer
        {
            Email = email,
            EncryptedPassword = password,
            FirstName = firstname,
            LastName = surname,
            PhoneNumber = mobile,
            ProfilePicture = profilePicture
        };

        using var response = await Http.PostAsJsonAsync("api/auth/create", req);
        var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
        if (result.Sucess == true)
        {
            NavManager.NavigateTo("/home");
        }
        else
        {
            errorMessage = "Fejl";
        }

    } }




@* Bootstrap 12/11 21 https://getbootstrap.com/docs/4.5/examples/ *@
